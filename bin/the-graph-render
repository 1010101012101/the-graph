#!/usr/bin/env node

// Node.js CLI tool for rendering an image of the graph

const buffer = require('buffer');
const fs = require('fs');
const path = require('path');

const argv = require('yargs').argv
const jsjob = require('jsjob');

function unpackUrl(dataurl) { 
    if (dataurl.indexOf('data:') != 0) {
        throw new Error('Dataurl must start with data');
    }
    var mimetype = dataurl.substring(dataurl.indexOf(':'), dataurl.indexOf(';'));
    var encoding = dataurl.substring(dataurl.indexOf(';')+1, dataurl.indexOf(',')); 
    if (encoding != 'base64') {
        throw new Error('Dataurl must have base64 encoding, got ' + encoding);
    }
    
    var encoded = dataurl.substring(dataurl.indexOf(','), dataurl.length);
    var raw = buffer.Buffer.from(encoded, 'base64');
    return raw;
}

function runRender(graphData, options, callback) {
    // FIXME: host it
    var jobUrl = 'http://localhost:3000/dist/the-graph-render.js';

    var runnerConfig = {
        verbose: options.verbose,
    };
    var runner = new jsjob.Runner(runnerConfig);
    runner.start(function(err) {
        if (err) return callback(err)

        runner.runJob(jobUrl, graphData, options, function(err, result, details) {
            if (err) { return callback(err); }

            console.log('jsjob returned', err);

            runner.stop(function(err) { 
                return callback(err, result);
            });
        });
    });

}

function render(graphPath, options, callback) {
    if (!options.format) { options.format = 'png' }
    if (!options.output) {
        options.output = graphPath.replace(path.extname(graphPath), '.'+options.format)
    }

    fs.readFile(graphPath, 'utf-8', function(err, d) {
        if (err) { return callback(err) }
        try {
            graphData = JSON.parse(d);
        } catch (err) {
            return callback(err);
        }
    
        runRender(graphData, options, function (err, output, details) {
            if (err) { return callback(err); }

            const imageData = unpackUrl(output);

            fs.writeFile(options.output, imageData, function(err) {
                return callback(err, options.output);
            });
        });

    })

}

function main() {
    var callback = function(err, out) { 
        if (err) {
            console.error(err);
            console.error(err.stack);
            process.exit(1);
        }
        console.log('Written to', out);
        process.exit(0);
    };
    console.log('a', argv)
    render(argv._[0], argv, callback);
}

if (!module.parent) {
    main();
}
